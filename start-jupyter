#!/bin/bash
# Exit on error

SOURCE="${BASH_SOURCE[0]}"                                                                                                                                       
_O_SOURCE=$SOURCE                                                                                                                                                
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink                                                                               
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"                                                                                               
  SOURCE="$(readlink "$SOURCE")"                                                                                                                                 
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done                                                                                                                                                             
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"                                                                                                 
source $DIR/settings.sh 



set -e
# Exit on undefined variable
set -u


# By default start notebook not lab
start_cmd=notebook
list_cmd=notebook

function _help(){
      echo -e "Usage: $prog_name [OPTIONS]
Tool to start jupyter and print out connection information.
The jupyter executable is selected from the users PATH variable

Options:
    -h, --help      Show this message and exit

    --debug         Save jupyter output to a file

    --port xxxx     Specify port to start jupyter server on
${LAB_FLAG:-}"
      exit 0
}


# Extra functionality to deal with symlinks
# with different names
export prog_name=$(basename $_O_SOURCE)
if [[ $prog_name == "start-jupyter" ]];then
    export LAB_FLAG="\n    --lab           Start Jupyterlab instead\n"
elif [[ $prog_name =~  "jupyterlab"  ]];then
    set -- "${@}" "--lab"
fi
PORT=$_DEFAULT_PORT # default port
## Argument parsing
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --debug)
      keep_log_file=1
      shift
      ;;
    --lab)
      start_cmd=lab
      list_cmd=server
      echo "Selected jupyter lab"
      shift
      ;;
    --port)
      PORT="$2"
      shift
      shift
      ;;
    --help|-h)
        _help
      ;;
    *)    # unknown option
      echo -e "Unknown argument: $key\nUsage: $_O_SOURCE [OPTIONS], see --help for more information"
      exit 1
      ;;
  esac
done
if [[ ${POSITIONAL+defined} ]];then
    set -- "${POSITIONAL[@]}" # restore positional parameters
fi


# This is of course trivial to work around
# Just meant as a guide for the user
if [[ ! "${SLURM_JOB_ID+defined}" && "$JOB_ONLY" == "yes" ]]; then
    echo "Jupyter notebook server can be started only on compute nodes"
    echo "Run $prog_name in a batch job script or interactive session"
    exit 1
fi

# Check that jupyter exists
type jupyter &>/dev/null || {  echo "No jupyter found" ; exit 1  ;}
if [[ $start_cmd == "lab" ]];then 
      type jupyter-lab &>/dev/null || {  echo "No jupyter lab found" ; exit 1  ;}
fi


if [[ ${SLURM_JOB_ID+defined} ]];then
    id=$SLURM_JOB_ID
else
    id=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 8 ; echo '')
fi








# Start notebook in current dir
# Don't try to open a browser
settings="--notebook-dir=$PWD --no-browser --ip=\"$_IP\" --port=$PORT"
echo "Command: jupyter $start_cmd $settings"

if [[ "${keep_log_file+defined}"  ]];then
    echo "Jupyter log output can be found in $(pwd)/jupyter.$id.out"
    jupyter $start_cmd $settings  &> jupyter.$id.out &
else
    jupyter $start_cmd $settings  &> /dev/null &
fi

pid=$!
trap "kill -9 ${pid}; exit 0" INT
trap "kill -9 ${pid}; exit 0 " EXIT

# find url with token and port for ssh forwarding
# the while loop ensures that the server has been started
url=""
timeout=$NOTEBOOK_TIMEOUT

echo "Waiting for jupyter to start (${timeout}sec timeout)"
wait_time=0
pause_time=1
while [ -z "$url" ]
do
    ps -p $pid &>/dev/null || { echo "Jupyter exit unexpectedly" ; exit 1 ;}
    sleep $pause_time
    wait_time=$((wait_time + pause_time))
    url=$(jupyter $list_cmd list | sed -n 's/\(http.*\) ::.*/\1/p' | head -n 1)
    if [[ $wait_time -gt $timeout ]];then
        echo "Timeout waiting for jupyter"
        exit 1
    fi
done

port=$(echo "$url" | sed -e 's/.*[a-z,0-9]:\([0-9]*\).*/\1/' )

echo -e "
    Run on local machine to forward jupyter from ${SUPERCOMPUTER^}

    Linux / macOS / MobaXTerm / Cmder:                               
    -----------------------------------------------------------------
    ssh -N -L $port:$_HN:$port $_JUMP_HOST $_TARGET_HOST
    -----------------------------------------------------------------
                                                                 
    PuTTy:                                                           
    -----------------------------------------------------------------
    ssh -N -L $port:$_HN:$port $_TARGET_HOST 
    Set Source ($port) and Destination ($_HN:$port) in:              
    PuTTy -> Connection -> SSH -> Tunnels                            
    -----------------------------------------------------------------
    "
echo -e "                                                            
    Copy/Paste this URL into your browser                            
    -----------------------------------------------------------------
    $(echo $url | sed "s/\(http:\/\/\)\([a-z0-9]*\)/\1localhost/g" )
    -----------------------------------------------------------------
    "                                                                
trap "kill -1 ${pid}; exit 0" INT
wait
